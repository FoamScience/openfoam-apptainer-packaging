# ansible-playbook build.yaml --extra-vars="original_dir=$PWD" --extra-vars=@config.yaml
---

- name: Check local requirements
  hosts: "{{ groups['build_hosts'] | default('localhost') }}"
  gather_facts: false
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: Apptainer version check
      command: apptainer --version
      register: apptainer_version_output
      changed_when: false
    - name: A supported apptainer version is installed
      assert:
        that:
          - apptainer_version_output.stdout.split(' ')[2] is version("1.3.1", ">=")
        fail_msg: "Supported apptainer versions are 1.3.1 or newer"
    - name: Basic containers folder check
      file:
        path: "{{ original_dir }}/containers/basic"
        state: directory
    - name: Project containers folder check
      file:
        path: "{{ original_dir }}/containers/projects"
        state: directory
    - name: Fail if original directory is not supplied
      fail:
        msg: 'The variable "original_dir" is undefined. run `ansible-playbook build.yaml --extra-vars="original_dir=$PWD @config.yaml"` instead'
      when: containers is undefined
    - name: Fail if containers config is undefined
      fail:
        msg: 'The variable "containers" is undefined. run `ansible-playbook build.yaml --extra-vars="original_dir=$PWD @config.yaml"` instead'
      when: containers is undefined
    - name: Set default pull configuration
      set_fact:
        pull: "{{ pull | default({'try_to_pull': true, 'protocol': 'oras', 'scope': 'ghcr.io/foamscience'}) }}"
    - name: Process extra basic definitions
      include_tasks:
        file: "{{ playbook_dir }}/partials/include_extra_basics.yaml"
      when: containers.extra_basics is defined

- name: Base containers
  hosts: "{{ groups['build_hosts'] | default('localhost') }}"
  gather_facts: no
  tasks:
    - name: Gather MPI container information
      set_fact:
        mpi_containers: "{{ (mpi_containers | default([]) + [dict({'os': item.1.os, 'mpi': item.1.mpi})]) | unique }}"
      loop: "{{ containers.basic.items() }}"
    - name: Try to get MPI containers from registry
      shell: |
        if [ ! -f {{ original_dir }}/containers/basic/{{ item.os.distro }}-{{ item.os.version }}-{{ item.mpi.implementation }}-{{ item.mpi.version }}.sif ]; then
          apptainer pull \
            {{ original_dir }}/containers/basic/{{ item.os.distro }}-{{ item.os.version }}-{{ item.mpi.implementation }}-{{ item.mpi.version }}.sif \
            {{ pull.protocol }}://{{ pull.scope }}/{{ item.os.distro }}-{{ item.os.version }}-{{ item.mpi.implementation }}-{{ item.mpi.version }}
        fi
      loop: "{{ mpi_containers }}"
      ignore_errors: yes
      when: pull.try_to_pull
    - name: Build MPI base containers if .sif file doesn't exist
      vars:
        distro: "{{ item.os.distro | regex_replace('_', '/') }}"
      shell: |
        if [ ! -f {{ original_dir }}/containers/basic/{{ item.os.distro }}-{{ item.os.version }}-{{ item.mpi.implementation }}-{{ item.mpi.version }}.sif ]; then
          apptainer build \
            --warn-unused-build-args \
            --build-arg OS_DISTRO={{ distro }} \
            --build-arg OS_VERSION={{ item.os.version }} \
            --build-arg MPI_IMPLEMENTATION={{ item.mpi.implementation }} \
            --build-arg MPI_VERSION={{ item.mpi.version }} \
            {{ original_dir }}/containers/basic/{{ item.os.distro }}-{{ item.os.version }}-{{ item.mpi.implementation }}-{{ item.mpi.version }}.sif \
            {{ playbook_dir }}/basic/{{ item.mpi.implementation }}.def \
            > {{ item.os.distro }}-{{ item.os.version }}-{{ item.mpi.implementation }}-{{ item.mpi.version }}.log 2>&1
        else
          echo "Container {{ original_dir }}/containers/basic/{{ item.os.distro }}-{{ item.os.version }}-{{ item.mpi.implementation }}-{{ item.mpi.version }}.sif already exists. Skipping build."
        fi
      loop: "{{ mpi_containers }}"
    - name: Try to get base containers from registry
      shell: |
        if [ ! -f {{ original_dir }}/containers/basic/{{ item.0 }}.sif ]; then
          apptainer pull \
            {{ original_dir }}/containers/basic/{{ item.0 }}.sif \
            {{ pull.protocol }}://{{ pull.scope }}/{{ item.0 }}
        else
          echo "Container {{ original_dir }}/containers/basic/{{ item.0 }}.sif already exists. Skipping pull."
        fi
      loop: "{{ containers.basic.items() }}"
      ignore_errors: yes
      when: pull.try_to_pull
    - name: Build layered base containers if corresponding .sif files don't exist
      vars:
        distro: "{{ item.0.value.os.distro | regex_replace('_', '/') }}"
      shell: |
        if [ -f {{ original_dir }}/containers/basic/{{ item.0.key }}.sif ] && [ {{ framework_index }} -eq 0 ]; then
          echo "Container {{ original_dir }}/containers/basic/{{ item.0.key }}.sif already exists. Skipping build."
          exit 0
        else
          cd {{ original_dir }}
          start_container={{ distro }}-{{ item.0.value.os.version }}-{{ item.0.value.mpi.implementation }}-{{ item.0.value.mpi.version }}
          if [ {{ framework_index }} -eq 0 ]; then
            cp {{ original_dir }}/containers/basic/${start_container}.sif {{ original_dir }}/containers/basic/{{ item.0.key }}.sif
          else
            start_container={{ item.0.key }}
          fi
          apptainer build --force \
                --warn-unused-build-args \
                --build-arg OS_DISTRO={{ distro }} \
                --build-arg OS_VERSION={{ item.0.value.os.version }} \
                --build-arg MPI_IMPLEMENTATION={{ item.0.value.mpi.implementation }} \
                --build-arg MPI_VERSION={{ item.0.value.mpi.version }} \
                --build-arg FRAMEWORK_VERSION={{ item.1.version }} \
                --build-arg FRAMEWORK_GIT_REF={{ item.1.git_ref | default('default') }} \
                --build-arg BASE_CONTAINER=${start_container} \
                {{ original_dir }}/containers/basic/{{ item.0.key }}.sif \
                {{ playbook_dir }}/basic/{{ item.1.definition }}.def \
                >> {{ item.0.key }}.log 2>&1
        fi
      when: not item.0.framework is mapping
      loop: "{{ containers.basic | dict2items | selectattr('value.framework', 'defined') | rejectattr('value.framework', 'mapping') | subelements('value.framework') }}"
      loop_control:
        loop_var: item
        index_var: framework_index
    - name: Build base containers if corresponding .sif files don't exist
      vars:
        distro: "{{ item.1.os.distro | regex_replace('_', '/') }}"
      shell: |
        if [ ! -f {{ original_dir }}/containers/basic/{{ item.0 }}.sif ]; then
          cd {{ original_dir }}
          apptainer build --force \
                --warn-unused-build-args \
                --build-arg OS_DISTRO={{ distro  }} \
                --build-arg OS_VERSION={{ item.1.os.version }} \
                --build-arg MPI_IMPLEMENTATION={{ item.1.mpi.implementation }} \
                --build-arg MPI_VERSION={{ item.1.mpi.version }} \
                --build-arg FRAMEWORK_VERSION={{ item.1.framework.version }} \
                --build-arg FRAMEWORK_GIT_REF={{ item.1.framework.git_ref | default('default') }} \
                --build-arg BASE_CONTAINER={{ distro }}-{{ item.1.os.version }}-{{ item.1.mpi.implementation }}-{{ item.1.mpi.version }} \
                {{ original_dir }}/containers/basic/{{ item.0 }}.sif \
                {{ playbook_dir }}/basic/{{ item.1.framework.definition }}.def \
                > {{ item.0 }}.log 2>&1
        else
          echo "Container {{ original_dir }}/containers/basic/{{ item.1.framework.definition }}.sif already exists. Skipping build."
        fi
      when: item.1.framework is mapping
      loop: "{{ containers.basic.items() }}"

- name: Project containers
  hosts: "{{ groups['build_hosts'] | default('localhost') }}"
  gather_facts: no
  tasks:
    - name: Initialize build combinations list
      set_fact:
        projects: []
    - name: Process projects build args
      include_tasks:
        file: "{{ playbook_dir }}/partials/projects_build_args.yaml"
      loop: "{{ containers.projects.items() }}"
      loop_control:
        loop_var: project
      when: "'projects' in containers"

    - name: Display build matrix for projects
      debug:
        var: projects
    
    - name: Build project containers
      shell: |
          apptainer build --force \
                --warn-unused-build-args {{ " " }} \
                {%- if 'build_args' in item -%} \
                {%- set args = [] -%} \
                {%- for key, value in item.build_args.items() -%} \
                {{ "--build-arg " ~ (key | upper) ~ "=" ~ value }}  {{ " " }} \
                {%- endfor -%}  {{ " " }} \
                {%- endif -%} \
                --build-arg CONTAINERS_DIR={{ original_dir }}/containers \
                --build-arg BASE_CONTAINER={{ item.base_container }} \
                --build-arg OS_VERSION={{ containers.basic[item.base_container].os.version }} \
                --build-arg MPI_VERSION={{ containers.basic[item.base_container].mpi.version }} \
                {{ original_dir }}/containers/projects/{{ item.name }}.sif \
                {{ original_dir }}/{{ item.definition }} \
                > {{ item.name }}.log 2>&1
      loop: "{{ projects | list }}"
